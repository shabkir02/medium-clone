import React, {useEffect, useState, useContext} from 'react';

import ArticleForm from 'components/articleForm';
import useFetch from 'hooks/useFetch';
import { Redirect } from 'react-router-dom';
import {CurrentUserContext} from 'contexts/currentUser';

const EditArticle = ({match}) => {

  const slug = match.params.slug;
  const _apiUrl = `/articles/${slug}`;
  const [{response: fetchArticleResponse}, doFetchArticle] = useFetch(_apiUrl);
  const [
    {response: updateArticleResponse, error: updateArticleError}, 
    doUpdateArticle
  ] = useFetch(_apiUrl);
  const [initialValues, setInititalValues] = useState(null);
  const [isSuccessfullSubmit, setIsSuccessfullSubmit] = useState(false)
  const [currentUserState] = useContext(CurrentUserContext);

  const handleSubmit = (article) => {
    console.log('handlesubmit', article)
    doUpdateArticle({
      method: 'put',
      data: {
        article
      }
    })
  }

  useEffect(() => {
    doFetchArticle()
  }, [doFetchArticle]);
  
  useEffect(() => {
    if (!fetchArticleResponse) {
      return
    }

    setInititalValues({
      title: fetchArticleResponse.article.title,
      description: fetchArticleResponse.article.description,
      body: fetchArticleResponse.article.body,
      tagList: fetchArticleResponse.article.tagList
    })
  }, [fetchArticleResponse]);

  useEffect(() => {

    if (!updateArticleResponse) {
      return
    }

    setIsSuccessfullSubmit(true);
  }, [updateArticleResponse])

  if (currentUserState.isLoggedIn === false) {
    return <Redirect to='/'/>
  }

  if (isSuccessfullSubmit) {
    return <Redirect to={`/articles/${slug}`}/>
  }

  return (
    <ArticleForm 
      onSubmit={handleSubmit} 
      errors={(updateArticleError && updateArticleError.errors) || {}} 
      initialValues={initialValues}
    />
  )
}

export default EditArticle;